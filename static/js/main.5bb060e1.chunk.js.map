{"version":3,"sources":["components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","components/Form/Form.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducer.js","components/ContactsList/ContactsList.js","components/Form/Form.js","components/Filter/Filter.js","App.js","redux/store.js","index.js"],"names":["module","exports","fetchContactRequest","createAction","fetchContactSuccess","fetchContactError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","name","number","dispatch","contact","post","then","data","catch","error","contactId","delete","a","get","getFilter","state","contacts","filter","getFilteredContacts","createSelector","items","normalizedFilter","toLowerCase","includes","createReducer","payload","id","_","combineReducers","connect","contactsSelectors","onDeleteContact","contactsOperations","className","styles","contacts_list","map","contacts_item","contacts_list__button","onClick","Form","nameInputId","shortid","generate","numberInputId","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","form","this","form__lable","htmlFor","form__input","onChange","type","pattern","title","required","form__button","Component","target","filter__label","filter__input","App","fetchContacts","addContact","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bb060e1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts_list\":\"ContactsList_contacts_list__3qHEv\",\"contacts_item\":\"ContactsList_contacts_item__2_K3-\",\"contacts_list__button\":\"ContactsList_contacts_list__button__2dnXf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__32voW\",\"filter__label\":\"Filter_filter__label__1DoZX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__1YHoI\",\"form__input\":\"Form_form__input__P6kSS\",\"form__button\":\"Form_form__button__G7DmD\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction(\r\n  'contacts/deleteContactRequest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","import axios from 'axios';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n} from './contacts-actions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4000';\r\n\r\nconst fetchContacts = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  // Async case\r\n  try {\r\n    const { data } = await axios.get('/contacts');\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }\r\n\r\n  // axios\r\n  //   .get('/contacts')\r\n  //   .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n  //   .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact =\r\n  ({ name, number }) =>\r\n  dispatch => {\r\n    const contact = { name, number };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n      .post('/contacts', contact)\r\n      .then(({ data }) => dispatch(addContactSuccess(data)))\r\n      .catch(error => dispatch(addContactError(error)));\r\n  };\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default { addContact, deleteContact, fetchContacts };\r\n","import { createSelector } from '@reduxjs/toolkit';\n\nconst getFilter = state => state.contacts.filter;\n\nconst getAllContacts = state => state.contacts.items;\n\n// const getFilteredContacts = state => {\n//   const contacts = getAllContacts(state);\n//   const filter = getFilter(state);\n//   const normalizedFilter = filter.toLowerCase();\n\n//   return contacts.filter(({ name }) =>\n//     name.toLowerCase().includes(normalizedFilter),\n//   );\n// };\n\n//С МЕМОИЗАЦИЕЙ\nconst getFilteredContacts = createSelector(\n  [getAllContacts, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n\nexport default {\n  getFilter,\n  getFilteredContacts,\n};\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  changeFilter,\r\n  fetchContactSuccess,\r\n} from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  // НАПИШИТЕ ПРИМЕР ПО ДАБАВЛЕНИЮ ПРОВЕРКИ НА ИМЕЮЩЕЕСЯ ИМЯ, ПОЖАЛУЙСТА!!!!\r\n  // [actions.addContact]: (state, {payload}) => state.find((contact) => contact.name === payload.name ? alert(`${payload.name} already exist`) : [...state, payload]),\r\n  [fetchContactSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst error = createReducer(null, {});\r\n\r\nexport default combineReducers({ items, filter, error });\r\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\nimport styles from './ContactsList.module.css';\n\nconst ContactsList = ({ contacts, onDeleteContact }) => (\n  <ul className={styles.contacts_list}>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id} className={styles.contacts_item}>\n        <p>{name}:</p>\n        <p>{number}</p>\n        <button\n          className={styles.contacts_list__button}\n          onClick={() => onDeleteContact(id)}\n        >\n          Удалить\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteContact: id => dispatch(contactsOperations.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { contactsOperations } from '../../redux/contacts';\nimport shortid from 'shortid';\nimport styles from './Form.module.css';\n\nclass Form extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  nameInputId = shortid.generate();\n  numberInputId = shortid.generate();\n\n  handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <>\n        <form className={styles.form} onSubmit={this.handleSubmit}>\n          <label className={styles.form__lable} htmlFor={this.nameInputId}>\n            Name\n          </label>\n          <input\n            className={styles.form__input}\n            value={this.state.name}\n            onChange={this.handleChange}\n            id={this.nameInputId}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n          <label className={styles.form__lable} htmlFor={this.numberInputId}>\n            Number\n          </label>\n          <input\n            className={styles.form__input}\n            id={this.numberInputId}\n            value={this.state.number}\n            onChange={this.handleChange}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className={styles.form__button} type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: (name, number) =>\n    dispatch(contactsOperations.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(Form);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport styles from './Filter.module.css';\nimport shortid from 'shortid';\nimport { contactsSelectors, changeFilter } from '../../redux/contacts';\n\nconst nameInputId = shortid.generate();\n\nconst Filter = ({ value, onChange }) => (\n  <div className={styles.filter}>\n    <label className={styles.filter__label} htmlFor={nameInputId}>\n      Find contacts by name\n    </label>\n    <input\n      className={styles.filter__input}\n      type=\"text\"\n      name=\"filter\"\n      id={nameInputId}\n      value={value}\n      onChange={onChange}\n    />\n  </div>\n);\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactsList from './components/ContactsList';\r\nimport Form from './components/Form/Form';\r\nimport Filter from './components/Filter/Filter';\r\nimport contactsOperations from './redux/contacts/contacts-operations';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <h1 className=\"title\">Phonebook</h1>\r\n        <Form onSubmit={this.addContact} />\r\n\r\n        <h2 className=\"title\">Contacts</h2>\r\n        <Filter />\r\n        <ContactsList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport { contactsReducer } from './contacts';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport default store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n// import { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport './Common.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\r\n      <App />\r\n      {/* </PersistGate> */}\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}